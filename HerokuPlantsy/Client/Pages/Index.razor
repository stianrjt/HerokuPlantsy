@page "/"

@using HerokuPlantsy.Shared
@inject HttpClient Http
@inject NavigationManager NavManager




@if (plants == null)
{
	<MudSkeleton />
	<MudSkeleton SkeletonType="SkeletonType.Circle" Width="50px" Height="50px" />
	<MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="200px" Height="110px" />
}
else
{
<MudGrid>

	@foreach (var plant in plants)
	{

		var linkDetails = $"plantDetails/{plant.ID.ToString()}";
		var link = $"editPlant/{plant.ID.ToString()}";

		var src = plant.Image != null ? plant.Image.ImagePath : "Strelitzia-reginae-1.jpg";
		<MudItem Style="background-color: transparent; border: none; elevation: unset" xs="6" md="3">
			<MudCard Style="width:200px" Elevation="3" Class="flex-wrap ma-2">
				<a href="@linkDetails">
					<MudCardMedia Image=@src Style="border-radius:2%; width:200px" Height="250" />
				</a>
				<MudCardHeader>
					<CardHeaderContent>
						<MudText Typo="Typo.h6">@plant.PlantName</MudText>
					</CardHeaderContent>
					<CardHeaderActions>
						<link href="https://use.fontawesome.com/releases/v5.14.0/css/all.css" rel="stylesheet">
						@if ((DateTimeOffset.Now - plant.LastWatered).Days < 3)
						{
							<MudIconButton Class="mr-1" Icon="fas fa-tint" Style="Color: forestgreen" Size="Size.Small"
										   OnClick="@(() => WaterPlant(plant))" />
						}
						else if ((DateTimeOffset.Now - plant.LastWatered).Days < 7)
						{

							<MudIconButton Class="mr-1" Icon="fas fa-tint " Style="Color: orange" Size="Size.Small"
										   OnClick="@(() => WaterPlant(plant))" />

						}
						else
						{
							<MudIconButton Class="mr-1" Icon="fas fa-tint " Style="Color: red" Size="Size.Small"
										   OnClick="@(() => WaterPlant(plant))" />
						}
					</CardHeaderActions>
				</MudCardHeader>
				<MudCardActions>
					<MudLink Href="@link">
						<MudButton Variant="Variant.Text" Color="Color.Secondary">Edit Plant</MudButton>
					</MudLink>
				</MudCardActions>
			</MudCard>
		</MudItem>

	}

</MudGrid>
}



@code {
	private List<Plant> plants;

	protected override async Task OnInitializedAsync()
	{
			plants = await Http.GetFromJsonAsync<List<Plant>>("plants");
		
	}


	public async void WaterPlant(Plant plant)
	{
		var waterLog = plant.WaterLog;
		waterLog.Add(new Water { WaterDate = DateTimeOffset.Now, });
		plant.WaterLog = waterLog;
		plant.LastWatered = DateTimeOffset.Now;
		await Http.PutAsJsonAsync($"plants/{plant.ID}", plant);
		return;
	}

}